#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

uint _26;
uint _105;
uint _109;

void main()
{
    uint _22;
    if (!(gl_GlobalInvocationID.x == 0u))
    {
        uint _23;
        uint _69;
        uint _29 = 0u;
        uint _30 = 0u;
        bool _48;
        for (;;)
        {
            uint _33 = (_30 << 2u) >> 2u;
            _48 = uvec4(imageLoad(_8, int(_33)).x, imageLoad(_8, int(_33 + 1u)).x, imageLoad(_8, int(_33 + 2u)).x, imageLoad(_8, int(_33 + 3u)).x).x == 40u;
            uint frontier_phi_6_pred;
            uint frontier_phi_6_pred_1;
            for (;;)
            {
                uint _87;
                uint frontier_phi_8;
                uint frontier_phi_8_1;
                if (_48)
                {
                    if (_30 == 10u)
                    {
                        frontier_phi_6_pred = _29;
                        frontier_phi_6_pred_1 = gl_GlobalInvocationID.y;
                        break;
                    }
                    uint _73 = (_30 << 4u) >> 2u;
                    _87 = uvec4(imageLoad(_8, int(_73)).x, imageLoad(_8, int(_73 + 1u)).x, imageLoad(_8, int(_73 + 2u)).x, imageLoad(_8, int(_73 + 3u)).x).x;
                    frontier_phi_8 = _29;
                    frontier_phi_8_1 = gl_GlobalInvocationID.y;
                }
                else
                {
                    uint _54 = (_30 * 12u) >> 2u;
                    _87 = uvec4(imageLoad(_8, int(_54)).x, imageLoad(_8, int(_54 + 1u)).x, imageLoad(_8, int(_54 + 2u)).x, imageLoad(_8, int(_54 + 3u)).x).x;
                    frontier_phi_8 = _105;
                    frontier_phi_8_1 = _109;
                }
                uint _90 = (_30 << 3u) >> 2u;
                frontier_phi_6_pred = (_87 + _29) + uvec4(imageLoad(_8, int(_90)).x, imageLoad(_8, int(_90 + 1u)).x, imageLoad(_8, int(_90 + 2u)).x, imageLoad(_8, int(_90 + 3u)).x).x;
                frontier_phi_6_pred_1 = 1u;
                break;
            }
            _23 = frontier_phi_6_pred;
            _69 = frontier_phi_6_pred_1;
            uint _31 = _69 + _30;
            if (_31 < gl_GlobalInvocationID.x)
            {
                _29 = _23;
                _30 = _31;
                continue;
            }
            else
            {
                break;
            }
        }
        _22 = _23;
    }
    else
    {
        _22 = 0u;
    }
    imageStore(_8, int(0u >> 2u), uvec4(_22));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 127
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %104 "frontier_phi_8"
OpName %107 "frontier_phi_6.pred"
OpName %108 "frontier_phi_8"
OpName %110 "frontier_phi_6.pred"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 0
%18 = OpConstant %5 1
%20 = OpTypeBool
%25 = OpConstant %5 2
%27 = OpTypeVector %5 4
%44 = OpConstant %5 3
%49 = OpConstant %5 40
%51 = OpConstant %5 10
%53 = OpConstant %5 12
%72 = OpConstant %5 4
%106 = OpConstantTrue %20
%3 = OpFunction %1 None %2
%4 = OpLabel
%26 = OpUndef %5
%105 = OpUndef %5
%109 = OpUndef %5
OpBranch %111
%111 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%17 = OpAccessChain %13 %12 %18
%19 = OpLoad %5 %17
%21 = OpIEqual %20 %16 %15
OpSelectionMerge %124 None
OpBranchConditional %21 %124 %112
%112 = OpLabel
OpBranch %113
%113 = OpLabel
%29 = OpPhi %5 %15 %112 %23 %122
%30 = OpPhi %5 %15 %112 %31 %122
%32 = OpShiftLeftLogical %5 %30 %25
%33 = OpShiftRightLogical %5 %32 %25
%34 = OpImageRead %27 %9 %33
%35 = OpCompositeExtract %5 %34 0
%37 = OpIAdd %5 %33 %18
%36 = OpImageRead %27 %9 %37
%38 = OpCompositeExtract %5 %36 0
%40 = OpIAdd %5 %33 %25
%39 = OpImageRead %27 %9 %40
%41 = OpCompositeExtract %5 %39 0
%43 = OpIAdd %5 %33 %44
%42 = OpImageRead %27 %9 %43
%45 = OpCompositeExtract %5 %42 0
%46 = OpCompositeConstruct %27 %35 %38 %41 %45
%47 = OpCompositeExtract %5 %46 0
%48 = OpIEqual %20 %47 %49
OpLoopMerge %123 %122 None
OpBranch %114
%114 = OpLabel
OpLoopMerge %121 %125 None
OpBranch %115
%115 = OpLabel
OpSelectionMerge %119 None
OpBranchConditional %48 %117 %116
%117 = OpLabel
%50 = OpIEqual %20 %30 %51
OpSelectionMerge %118 None
OpBranchConditional %50 %120 %118
%120 = OpLabel
OpBranch %121
%118 = OpLabel
%71 = OpShiftLeftLogical %5 %30 %72
%73 = OpShiftRightLogical %5 %71 %25
%74 = OpImageRead %27 %9 %73
%75 = OpCompositeExtract %5 %74 0
%77 = OpIAdd %5 %73 %18
%76 = OpImageRead %27 %9 %77
%78 = OpCompositeExtract %5 %76 0
%80 = OpIAdd %5 %73 %25
%79 = OpImageRead %27 %9 %80
%81 = OpCompositeExtract %5 %79 0
%83 = OpIAdd %5 %73 %44
%82 = OpImageRead %27 %9 %83
%84 = OpCompositeExtract %5 %82 0
%85 = OpCompositeConstruct %27 %75 %78 %81 %84
%86 = OpCompositeExtract %5 %85 0
OpBranch %119
%116 = OpLabel
%52 = OpIMul %5 %30 %53
%54 = OpShiftRightLogical %5 %52 %25
%55 = OpImageRead %27 %9 %54
%56 = OpCompositeExtract %5 %55 0
%58 = OpIAdd %5 %54 %18
%57 = OpImageRead %27 %9 %58
%59 = OpCompositeExtract %5 %57 0
%61 = OpIAdd %5 %54 %25
%60 = OpImageRead %27 %9 %61
%62 = OpCompositeExtract %5 %60 0
%64 = OpIAdd %5 %54 %44
%63 = OpImageRead %27 %9 %64
%65 = OpCompositeExtract %5 %63 0
%66 = OpCompositeConstruct %27 %56 %59 %62 %65
%67 = OpCompositeExtract %5 %66 0
OpBranch %119
%119 = OpLabel
%87 = OpPhi %5 %67 %116 %86 %118
%104 = OpPhi %5 %105 %116 %29 %118
%108 = OpPhi %5 %109 %116 %19 %118
%88 = OpIAdd %5 %87 %29
%89 = OpShiftLeftLogical %5 %30 %44
%90 = OpShiftRightLogical %5 %89 %25
%91 = OpImageRead %27 %9 %90
%92 = OpCompositeExtract %5 %91 0
%94 = OpIAdd %5 %90 %18
%93 = OpImageRead %27 %9 %94
%95 = OpCompositeExtract %5 %93 0
%97 = OpIAdd %5 %90 %25
%96 = OpImageRead %27 %9 %97
%98 = OpCompositeExtract %5 %96 0
%100 = OpIAdd %5 %90 %44
%99 = OpImageRead %27 %9 %100
%101 = OpCompositeExtract %5 %99 0
%102 = OpCompositeConstruct %27 %92 %95 %98 %101
%103 = OpCompositeExtract %5 %102 0
%68 = OpIAdd %5 %88 %103
OpBranch %121
%125 = OpLabel
OpBranch %114
%121 = OpLabel
%107 = OpPhi %5 %68 %119 %29 %120
%110 = OpPhi %5 %18 %119 %19 %120
%23 = OpCopyObject %5 %107
%69 = OpCopyObject %5 %110
OpBranch %122
%122 = OpLabel
%31 = OpIAdd %5 %69 %30
%70 = OpULessThan %20 %31 %16
OpBranchConditional %70 %113 %123
%123 = OpLabel
OpBranch %124
%124 = OpLabel
%22 = OpPhi %5 %15 %111 %23 %123
%24 = OpShiftRightLogical %5 %15 %25
%28 = OpCompositeConstruct %27 %22 %22 %22 %22
OpImageWrite %9 %24 %28
OpReturn
OpFunctionEnd
#endif
