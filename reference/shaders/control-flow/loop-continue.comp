#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

uint _23;
uint _102;

void main()
{
    uint _19;
    if (!(gl_GlobalInvocationID.x == 0u))
    {
        uint _20;
        uint _26 = 0u;
        uint _27 = 0u;
        bool _46;
        for (;;)
        {
            uint _30 = (_27 << 2u) >> 2u;
            _46 = uvec4(imageLoad(_8, int(_30)).x, imageLoad(_8, int(_30 + 1u)).x, imageLoad(_8, int(_30 + 2u)).x, imageLoad(_8, int(_30 + 3u)).x).x == 40u;
            uint frontier_phi_6_pred;
            for (;;)
            {
                uint _84;
                uint frontier_phi_8;
                if (_46)
                {
                    if (_27 == 10u)
                    {
                        frontier_phi_6_pred = _26;
                        break;
                    }
                    uint _70 = (_27 << 4u) >> 2u;
                    _84 = uvec4(imageLoad(_8, int(_70)).x, imageLoad(_8, int(_70 + 1u)).x, imageLoad(_8, int(_70 + 2u)).x, imageLoad(_8, int(_70 + 3u)).x).x;
                    frontier_phi_8 = _26;
                }
                else
                {
                    uint _52 = (_27 * 12u) >> 2u;
                    _84 = uvec4(imageLoad(_8, int(_52)).x, imageLoad(_8, int(_52 + 1u)).x, imageLoad(_8, int(_52 + 2u)).x, imageLoad(_8, int(_52 + 3u)).x).x;
                    frontier_phi_8 = _102;
                }
                uint _87 = (_27 << 3u) >> 2u;
                frontier_phi_6_pred = (_84 + _26) + uvec4(imageLoad(_8, int(_87)).x, imageLoad(_8, int(_87 + 1u)).x, imageLoad(_8, int(_87 + 2u)).x, imageLoad(_8, int(_87 + 3u)).x).x;
                break;
            }
            _20 = frontier_phi_6_pred;
            uint _28 = _27 + 1u;
            if (_28 == gl_GlobalInvocationID.x)
            {
                break;
            }
            else
            {
                _26 = _20;
                _27 = _28;
                continue;
            }
        }
        _19 = _20;
    }
    else
    {
        _19 = 0u;
    }
    imageStore(_8, int(0u >> 2u), uvec4(_19));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 121
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %101 "frontier_phi_8"
OpName %104 "frontier_phi_6.pred"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 0
%17 = OpTypeBool
%22 = OpConstant %5 2
%24 = OpTypeVector %5 4
%35 = OpConstant %5 1
%42 = OpConstant %5 3
%47 = OpConstant %5 40
%49 = OpConstant %5 10
%51 = OpConstant %5 12
%69 = OpConstant %5 4
%103 = OpConstantTrue %17
%3 = OpFunction %1 None %2
%4 = OpLabel
%23 = OpUndef %5
%102 = OpUndef %5
OpBranch %105
%105 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%18 = OpIEqual %17 %16 %15
OpSelectionMerge %118 None
OpBranchConditional %18 %118 %106
%106 = OpLabel
OpBranch %107
%107 = OpLabel
%26 = OpPhi %5 %15 %106 %20 %116
%27 = OpPhi %5 %15 %106 %28 %116
%29 = OpShiftLeftLogical %5 %27 %22
%30 = OpShiftRightLogical %5 %29 %22
%31 = OpImageRead %24 %9 %30
%32 = OpCompositeExtract %5 %31 0
%34 = OpIAdd %5 %30 %35
%33 = OpImageRead %24 %9 %34
%36 = OpCompositeExtract %5 %33 0
%38 = OpIAdd %5 %30 %22
%37 = OpImageRead %24 %9 %38
%39 = OpCompositeExtract %5 %37 0
%41 = OpIAdd %5 %30 %42
%40 = OpImageRead %24 %9 %41
%43 = OpCompositeExtract %5 %40 0
%44 = OpCompositeConstruct %24 %32 %36 %39 %43
%45 = OpCompositeExtract %5 %44 0
%46 = OpIEqual %17 %45 %47
OpLoopMerge %117 %116 None
OpBranch %108
%108 = OpLabel
OpLoopMerge %115 %119 None
OpBranch %109
%109 = OpLabel
OpSelectionMerge %113 None
OpBranchConditional %46 %111 %110
%111 = OpLabel
%48 = OpIEqual %17 %27 %49
OpSelectionMerge %112 None
OpBranchConditional %48 %114 %112
%114 = OpLabel
OpBranch %115
%112 = OpLabel
%68 = OpShiftLeftLogical %5 %27 %69
%70 = OpShiftRightLogical %5 %68 %22
%71 = OpImageRead %24 %9 %70
%72 = OpCompositeExtract %5 %71 0
%74 = OpIAdd %5 %70 %35
%73 = OpImageRead %24 %9 %74
%75 = OpCompositeExtract %5 %73 0
%77 = OpIAdd %5 %70 %22
%76 = OpImageRead %24 %9 %77
%78 = OpCompositeExtract %5 %76 0
%80 = OpIAdd %5 %70 %42
%79 = OpImageRead %24 %9 %80
%81 = OpCompositeExtract %5 %79 0
%82 = OpCompositeConstruct %24 %72 %75 %78 %81
%83 = OpCompositeExtract %5 %82 0
OpBranch %113
%110 = OpLabel
%50 = OpIMul %5 %27 %51
%52 = OpShiftRightLogical %5 %50 %22
%53 = OpImageRead %24 %9 %52
%54 = OpCompositeExtract %5 %53 0
%56 = OpIAdd %5 %52 %35
%55 = OpImageRead %24 %9 %56
%57 = OpCompositeExtract %5 %55 0
%59 = OpIAdd %5 %52 %22
%58 = OpImageRead %24 %9 %59
%60 = OpCompositeExtract %5 %58 0
%62 = OpIAdd %5 %52 %42
%61 = OpImageRead %24 %9 %62
%63 = OpCompositeExtract %5 %61 0
%64 = OpCompositeConstruct %24 %54 %57 %60 %63
%65 = OpCompositeExtract %5 %64 0
OpBranch %113
%113 = OpLabel
%84 = OpPhi %5 %65 %110 %83 %112
%101 = OpPhi %5 %102 %110 %26 %112
%85 = OpIAdd %5 %84 %26
%86 = OpShiftLeftLogical %5 %27 %42
%87 = OpShiftRightLogical %5 %86 %22
%88 = OpImageRead %24 %9 %87
%89 = OpCompositeExtract %5 %88 0
%91 = OpIAdd %5 %87 %35
%90 = OpImageRead %24 %9 %91
%92 = OpCompositeExtract %5 %90 0
%94 = OpIAdd %5 %87 %22
%93 = OpImageRead %24 %9 %94
%95 = OpCompositeExtract %5 %93 0
%97 = OpIAdd %5 %87 %42
%96 = OpImageRead %24 %9 %97
%98 = OpCompositeExtract %5 %96 0
%99 = OpCompositeConstruct %24 %89 %92 %95 %98
%100 = OpCompositeExtract %5 %99 0
%66 = OpIAdd %5 %85 %100
OpBranch %115
%119 = OpLabel
OpBranch %108
%115 = OpLabel
%104 = OpPhi %5 %66 %113 %26 %114
%20 = OpCopyObject %5 %104
OpBranch %116
%116 = OpLabel
%28 = OpIAdd %5 %27 %35
%67 = OpIEqual %17 %28 %16
OpBranchConditional %67 %117 %107
%117 = OpLabel
OpBranch %118
%118 = OpLabel
%19 = OpPhi %5 %15 %105 %20 %117
%21 = OpShiftRightLogical %5 %15 %22
%25 = OpCompositeConstruct %24 %19 %19 %19 %19
OpImageWrite %9 %21 %25
OpReturn
OpFunctionEnd
#endif
